{"qas": [{"question": "What two fields of theoretical computer science closely mirror computational complexity theory?", "id": "56e17644e3433e1400422f40", "answers": [{"text": "analysis of algorithms and computability theory", "answer_start": 59}, {"text": "analysis of algorithms and computability theory", "answer_start": 59}, {"text": "analysis of algorithms and computability theory", "answer_start": 59}], "is_impossible": false}, {"question": "What field of computer science analyzes the resource requirements of a specific algorithm isolated unto itself within a given problem?", "id": "56e17644e3433e1400422f41", "answers": [{"text": "analysis of algorithms", "answer_start": 59}, {"text": "analysis of algorithms", "answer_start": 134}, {"text": "analysis of algorithms", "answer_start": 134}], "is_impossible": false}, {"question": "What field of computer science analyzes all possible algorithms in aggregate to determine the resource requirements needed to solve to a given problem?  ", "id": "56e17644e3433e1400422f42", "answers": [{"text": "computational complexity theory", "answer_start": 161}, {"text": "computational complexity theory", "answer_start": 161}, {"text": "computational complexity theory", "answer_start": 161}], "is_impossible": false}, {"question": "What field of computer science is primarily concerned with determining the likelihood of whether or not a problem can ultimately be solved using algorithms?", "id": "56e17644e3433e1400422f43", "answers": [{"text": "computability theory", "answer_start": 86}, {"text": "computability theory", "answer_start": 663}, {"text": "computability theory", "answer_start": 663}], "is_impossible": false}, {"plausible_answers": [{"text": "analysis of algorithms and computability theory.", "answer_start": 59}], "question": "What are two fields of theoretical computer science that closely mirror computational simplicity theory?", "id": "5ad5344b5b96ef001a10ab86", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "e former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem", "answer_start": 203}], "question": "What is not the key distinction between analysis of algorithms and computational complexity theory?", "id": "5ad5344b5b96ef001a10ab87", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "analysis of algorithms", "answer_start": 59}], "question": "What is the process of analyzing the amount of resources needed by a particular algorithm to solve a hypothesis?", "id": "5ad5344b5b96ef001a10ab88", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "computational complexity theory", "answer_start": 161}], "question": "What is the process that asks a more specific question about all possible algorithms that could not be used to solve the same problem?", "id": "5ad5344b5b96ef001a10ab89", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "analysis of algorithms", "answer_start": 59}], "question": "What process classifies problems that can and cannot be solved with approximately unlimited resources?", "id": "5ad5344b5b96ef001a10ab8a", "answers": [], "is_impossible": true}], "context": "Closely related fields in theoretical computer science are analysis of algorithms and computability theory. A key distinction between analysis of algorithms and computational complexity theory is that the former is devoted to analyzing the amount of resources needed by a particular algorithm to solve a problem, whereas the latter asks a more general question about all possible algorithms that could be used to solve the same problem. More precisely, it tries to classify problems that can or cannot be solved with appropriately restricted resources. In turn, imposing restrictions on the available resources is what distinguishes computational complexity from computability theory: the latter theory asks what kind of problems can, in principle, be solved algorithmically."}