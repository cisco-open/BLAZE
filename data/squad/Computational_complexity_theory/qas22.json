{"qas": [{"question": "Classification of resources is contingent on determining the upper and lower bounds of minimum time required by what?  ", "id": "56e1bc3ae3433e1400423104", "answers": [{"text": "the most efficient algorithm", "answer_start": 178}, {"text": "the most efficient algorithm", "answer_start": 178}, {"text": "the most efficient algorithm solving a given problem", "answer_start": 178}], "is_impossible": false}, {"question": "The analysis of a specific algorithm is typically assigned to what field of computational science?", "id": "56e1bc3ae3433e1400423105", "answers": [{"text": "analysis of algorithms", "answer_start": 399}, {"text": "analysis of algorithms", "answer_start": 399}, {"text": "analysis of algorithms", "answer_start": 399}], "is_impossible": false}, {"question": "Which bound of time is more difficult to establish?", "id": "56e1bc3ae3433e1400423106", "answers": [{"text": "lower bounds", "answer_start": 123}, {"text": "lower", "answer_start": 597}, {"text": "lower bounds", "answer_start": 597}], "is_impossible": false}, {"question": "A specific algorithm demonstrating T(n) represents what measure of time complexity?", "id": "56e1bc3ae3433e1400423107", "answers": [{"text": "upper bound", "answer_start": 434}, {"text": "upper and lower bounds", "answer_start": 113}, {"text": "upper bound", "answer_start": 434}], "is_impossible": false}, {"question": "What is the colloquial phrase used to convey the continuum of algorithms with unlimited availability irrespective of time? ", "id": "56e1bc3ae3433e1400423108", "answers": [{"text": "all possible algorithms", "answer_start": 676}, {"text": "all possible algorithms", "answer_start": 740}, {"text": "all possible algorithms", "answer_start": 740}], "is_impossible": false}, {"plausible_answers": [{"text": "proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem.", "answer_start": 105}], "question": "How does one note classify the computation time (or similar resources)?", "id": "5ad54e7c5b96ef001a10ac76", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "complexity of an algorithm", "answer_start": 236}], "question": "What is usually taken as the best case complexity, unless specified otherwise?", "id": "5ad54e7c5b96ef001a10ac77", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "Analyzing a particular algorithm", "answer_start": 341}], "question": "What does not fall under the field of analysis of algorithms>", "id": "5ad54e7c5b96ef001a10ac78", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "To show an upper bound T(n) on the time complexity of a problem", "answer_start": 423}], "question": "When does one not need to show only that there is a particular algorithm running time at mons T(nO?", "id": "5ad54e7c5b96ef001a10ac79", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "since lower bounds make a statement about all possible algorithms that solve a given problem", "answer_start": 634}], "question": "What is easy about proving lower bounds?", "id": "5ad54e7c5b96ef001a10ac7a", "answers": [], "is_impossible": true}], "context": "To classify the computation time (or similar resources, such as space consumption), one is interested in proving upper and lower bounds on the minimum amount of time required by the most efficient algorithm solving a given problem. The complexity of an algorithm is usually taken to be its worst-case complexity, unless specified otherwise. Analyzing a particular algorithm falls under the field of analysis of algorithms. To show an upper bound T(n) on the time complexity of a problem, one needs to show only that there is a particular algorithm with running time at most T(n). However, proving lower bounds is much more difficult, since lower bounds make a statement about all possible algorithms that solve a given problem. The phrase \"all possible algorithms\" includes not just the algorithms known today, but any algorithm that might be discovered in the future. To show a lower bound of T(n) for a problem requires showing that no algorithm can have time complexity lower than T(n)."}