{"qas": [{"question": "What is generally considered to be the most basic iteration of a Turing machine?", "id": "56e1aff7cd28a01900c67a68", "answers": [{"text": "A deterministic Turing machine", "answer_start": 0}, {"text": "deterministic", "answer_start": 2}, {"text": "deterministic Turing machine", "answer_start": 2}], "is_impossible": false}, {"question": "What fixed set of factors determine the actions of a deterministic Turing machine", "id": "56e1aff7cd28a01900c67a69", "answers": [{"text": "rules", "answer_start": 91}, {"text": "rules", "answer_start": 91}, {"text": "a fixed set of rules to determine its future actions", "answer_start": 76}], "is_impossible": false}, {"question": "What is the term used to identify a deterministic Turing machine that has additional random bits?", "id": "56e1aff7cd28a01900c67a6a", "answers": [{"text": "A probabilistic Turing machine", "answer_start": 130}, {"text": "probabilistic", "answer_start": 132}, {"text": "probabilistic Turing machine", "answer_start": 132}], "is_impossible": false}, {"question": "What type of Turing machine is capable of multiple actions and extends into a variety of computational paths?", "id": "56e1aff7cd28a01900c67a6b", "answers": [{"text": "A non-deterministic Turing machine", "answer_start": 398}, {"text": "non-deterministic", "answer_start": 400}, {"text": "non-deterministic Turing machine", "answer_start": 400}], "is_impossible": false}, {"question": "What is the term given to algorithms that utilize random bits?", "id": "56e1aff7cd28a01900c67a6c", "answers": [{"text": "randomized algorithms", "answer_start": 375}, {"text": "randomized algorithms", "answer_start": 375}, {"text": "randomized algorithms", "answer_start": 375}], "is_impossible": false}, {"plausible_answers": [{"text": "deterministic Turing machine", "answer_start": 2}], "question": "What uses a flexible set of rules to determine its future actions?", "id": "5ad546c75b96ef001a10ac0e", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "probabilistic Turing machine", "answer_start": 132}], "question": "What is a deterministic Turing machine with an extra supply of random ribbons?", "id": "5ad546c75b96ef001a10ac0f", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "The ability to make probabilistic decisions", "answer_start": 232}], "question": "What does not often help algorithms solve problems more efficiently?", "id": "5ad546c75b96ef001a10ac10", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "non-deterministic Turing machine", "answer_start": 400}], "question": "Which machine allows the machine to have multiple possible past actions from a given state?", "id": "5ad546c75b96ef001a10ac11", "answers": [], "is_impossible": true}, {"plausible_answers": [{"text": "is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches,", "answer_start": 632}], "question": "How is one way that one should not view non-determinism?", "id": "5ad546c75b96ef001a10ac12", "answers": [], "is_impossible": true}], "context": "A deterministic Turing machine is the most basic Turing machine, which uses a fixed set of rules to determine its future actions. A probabilistic Turing machine is a deterministic Turing machine with an extra supply of random bits. The ability to make probabilistic decisions often helps algorithms solve problems more efficiently. Algorithms that use random bits are called randomized algorithms. A non-deterministic Turing machine is a deterministic Turing machine with an added feature of non-determinism, which allows a Turing machine to have multiple possible future actions from a given state. One way to view non-determinism is that the Turing machine branches into many possible computational paths at each step, and if it solves the problem in any of these branches, it is said to have solved the problem. Clearly, this model is not meant to be a physically realizable model, it is just a theoretically interesting abstract machine that gives rise to particularly interesting complexity classes. For examples, see non-deterministic algorithm."}